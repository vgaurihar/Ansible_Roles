---
##   the api server playbook will perform below tasks. ----------  No Manual changes are reuired in this playbook
# 1. install apache & other required packages on remote api servers
# 2. copy jdk 1.6.0_45 & apache-tomcat-6.0.44 on remote api server & create neccesory symlinks
# 3. modify /etc/apache2/workers.properties,/etc/apache2/mods-available/jk.conf,/etc/apache2/sites-enabled/000-default.conf/etc/apache2/sites-available/default-ssl.conf
# 4. activate ssl module & start apache
# 5. copy NFVController.war on /usr/local/tomcat/webapps/ of remote api server
# 6. start tomcat 
# 7. this playbook will be called by /etc/ansible/site.yml for more info plz check /etc/ansible/site.yml for how we are calling playbooks 
# 8. also please do not change the sequence of below configuration

  - name: Install apache2=2.4.7 & libapache2-mod-jk=1:1.2.37-3 & coreutils=8.21 & mysql-client=5.5.46 packages required for api servers configuration.
    apt: name={{ item }} state=present
    with_items: 
     - apache2=2.4.7-1ubuntu4.8
     - libapache2-mod-jk=1:1.2.37-3
     - coreutils=8.21-1ubuntu5.1
     - mysql-client=5.5.46-0ubuntu0.14.04.2

  - name: copy jdk 1.6.0_45.tar.gz under /usr/local path
    copy: src=jdk1.6.0_45.tar.gz dest=/usr/local/ owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: extract jdk1.6.0._45.tar.gz on /usr/local path
    command: chdir=/usr/local tar xvf jdk1.6.0_45.tar.gz -C /usr/local creates=/usr/local/java

  - name: change the ownership of extracted jdk1.6.0_45 archieve
    command: chown -R {{ ansible_ssh_user }}:{{ ansible_ssh_user }} /usr/local/jdk1.6.0_45

  - name: Create symlink to /usr/local/java --> /usr/local/jdk1.6.0_45
    file: src=/usr/local/jdk1.6.0_45 dest=/usr/local/java state=link owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} force=yes

  - name: change the ownership of extracted java jdk1.6.0_45
    command: chown -R {{ ansible_ssh_user }}:{{ ansible_ssh_user }} /usr/local/java

  - name: copy apache-tomcat-6.0.44.tar.gz archieve on remote api servers on path /usr/local
    copy: src=apache-tomcat-6.0.44.tar.gz dest=/usr/local owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}
  
  - name: extract tomcat archieve on /usr/local path of api servers
    command: chdir=/usr/local tar xvf apache-tomcat-6.0.44.tar.gz -C /usr/local creates=/usr/local/tomcat 

  - name: change the ownership of extracted tomcat archieve
    command: chown -R {{ ansible_ssh_user }}:{{ ansible_ssh_user }} /usr/local/apache-tomcat-6.0.44

  - name: Create symlink to /usr/local/tomcat --> /usr/local/apache-tomcat-6.0.44 path
    file: src=/usr/local/apache-tomcat-6.0.44 dest=/usr/local/tomcat state=link owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} force=yes

  - name: change the ownership of extracted tomcat archieve link
    command: chown -R {{ ansible_ssh_user }}:{{ ansible_ssh_user }} /usr/local/tomcat

  - name: copy profile.j2 template on /etc/profile path to append java path
    template: src=profile.j2 dest=/etc/profile backup=yes

  - name: copy /etc/rc.local.j2 template for tomcat autostartup on reboot
    template: src=rc.local.j2 dest=/etc/rc.local backup=yes
  
  - name: source /etc/profile
    shell: source /etc/profile
    args:
     executable: /bin/bash

  - name: create /etc/apache2/workers.properties from template
    template: src=workers.properties.j2 dest=/etc/apache2/workers.properties backup=yes
  
  - name: add JkWorkersFile path in /etc/apache2/workers.properties below 3 shell commands do this job.
    shell: awk 'NR==23 {$0="JkWorkersFile /etc/apache2/workers.properties"} 1' /etc/apache2/mods-available/jk.conf > /tmp/test
  - shell: cat /tmp/test > /etc/apache2/mods-available/jk.conf
  - shell: rm -f /tmp/test

  - name: create sites-enabled.conf from template
    template: src=sites-enabled.conf.j2 dest=/etc/apache2/sites-enabled/000-default.conf backup=yes

  - name: activate ssl module
    command: a2enmod ssl
    notify: restart apache2

  - name: create default-ssl.conf from template
    template: src=sites-available.conf.j2 dest=/etc/apache2/sites-available/default-ssl.conf backup=yes

  - name: activate default-ssl.conf default virtual host
    command: a2ensite default-ssl.conf
    notify: restart apache2

  - name: create /etc/sudoers from template
    template: src=sudoers.j2 dest=/etc/sudoers backup=yes
  
  - name: copy NFVController.war on remote apiservers
    copy: src=NFVController.war dest=/usr/local/tomcat/webapps/ owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}
  
  - name: copy poller jars directory on api servers /usr/local/ path
    copy: src=jars.tar.gz dest=/usr/local/ owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: copy poller ntt directory on api servers /usr/local/ path
    copy: src=ntt.tar.gz dest=/usr/local/ owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }}

  - name: extract poller jars archieve 
    command: chdir=/usr/local tar xvf jars.tar.gz -C /usr/local creates=/usr/local/jars 

  - name: extract ntt poller archieve 
    command: chdir=/usr/local tar xvf ntt.tar.gz -C /usr/local creates=/usr/local/ntt

  - name: copy NFVControllerPoller.sh.j2 template to /usr/local/ntt/NFVControllerPoller path
    template: src=NFVControllerPoller.sh.j2 dest=/usr/local/ntt/NFVControllerPoller/NFVControllerPoller.sh mode="u=rwx,g=rx,o=rx"

  - name: setup NFVControllerPoller.sh cron-job on api server1
    cron: name="run NFVControllerPoller.sh every 5 min" minute="*/5" user="root" job="/bin/sh /usr/local/ntt/NFVControllerPoller/NFVControllerPoller.sh >> /usr/local/ntt/NFVControllerPoller/NFVControllerPoller.out"
    when: inventory_hostname == "{{ api01_eth0 }}"

  - name: start tomcat process
    command: su root -c  "export JAVA_HOME={{ lookup('env', 'JAVA_HOME') }} ; /usr/local/tomcat/bin/startup.sh"

  
